/* Created by: Brian Milne
 * Date: February 14, 2014
 * 
 * Description: This program is used by the Microage Executive Support 
 * technicians to track the work they perform. The program is linked to a
 * database that holds the client data and their computer information. This
 * information is automatically updated when a ticket is submitted. The program
 * generates an .xml file that is used by Clearview to import the data into its
 * system. The program has a feature to send an email copy of the excel file
 * but this feature was disabled to comply with the new Ontario Anti Span 
 * legislation.
 */

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import  java.io.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Calendar;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import  org.apache.poi.hssf.usermodel.HSSFSheet;
import  org.apache.poi.hssf.usermodel.HSSFWorkbook;
import  org.apache.poi.hssf.usermodel.HSSFRow;


/**
 *
 * @author Brian Milne
 */
public class Ticket extends javax.swing.JFrame {

    /**
     * Creates new form Ticket
     */
    public Ticket() {
        
        initComponents();
        getContentPane().setBackground(Color.gray);

        Image icon = Toolkit.getDefaultToolkit().getImage("lib/icon.png");
        this.setIconImage(icon);
        setTitle("Rogers WGS Ticket Tool");
        setDefaults();
        //jSpinnerDateEditor j
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jFrame1 = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        email = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        technician = new javax.swing.JComboBox();
        tab = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        pcName = new javax.swing.JTextField();
        make = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        model = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        asset = new javax.swing.JTextField();
        serial = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        issue = new javax.swing.JTextPane();
        resLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        resolution = new javax.swing.JTextPane();
        jSeparator2 = new javax.swing.JSeparator();
        dssRadio = new javax.swing.JRadioButton();
        imacRadio = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel49 = new javax.swing.JLabel();
        asset3 = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        partNum2 = new javax.swing.JTextField();
        serial3 = new javax.swing.JTextField();
        make2 = new javax.swing.JComboBox();
        model3 = new javax.swing.JComboBox();
        jLabel51 = new javax.swing.JLabel();
        model2 = new javax.swing.JComboBox();
        jSeparator8 = new javax.swing.JSeparator();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        asset2 = new javax.swing.JTextField();
        make3 = new javax.swing.JComboBox();
        jLabel60 = new javax.swing.JLabel();
        partNum3 = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        serial2 = new javax.swing.JTextField();
        jLabel63 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        chTicket = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        pcName2 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        desk = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        os2 = new javax.swing.JComboBox();
        jLabel22 = new javax.swing.JLabel();
        admin2 = new javax.swing.JComboBox();
        jLabel24 = new javax.swing.JLabel();
        appList2 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel26 = new javax.swing.JLabel();
        pcName3 = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        os3 = new javax.swing.JComboBox();
        jLabel28 = new javax.swing.JLabel();
        admin3 = new javax.swing.JComboBox();
        jLabel29 = new javax.swing.JLabel();
        appList3 = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        dock = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        chTicket4 = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        desk4 = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        dock4 = new javax.swing.JCheckBox();
        jLabel54 = new javax.swing.JLabel();
        type4 = new javax.swing.JComboBox();
        jLabel56 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        serial4 = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        asset4 = new javax.swing.JTextField();
        jLabel59 = new javax.swing.JLabel();
        partNum4 = new javax.swing.JTextField();
        pcName4 = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        model4 = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel37 = new javax.swing.JLabel();
        description = new javax.swing.JTextField();
        make4 = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        Calendar cal = Calendar.getInstance();
        DateFormat dateFormat2 = new SimpleDateFormat("dd/MM/yyyy hh:ss");
        Date initDate = cal.getTime();
        startDate = new javax.swing.JSpinner();
        jLabel16 = new javax.swing.JLabel();
        status = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        endDate = new javax.swing.JSpinner();
        actionTaken = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        reoccurence = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        confirmClose = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        clientName = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        title = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        location = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        floor = new javax.swing.JComboBox();
        requesterButton = new javax.swing.JButton();
        requester = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        notification = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        phone = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        saveSettings = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        clearMenu = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        logs = new javax.swing.JMenuItem();
        modifyMenu = new javax.swing.JMenu();
        databaseAdd = new javax.swing.JMenuItem();
        databaseUpdate = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setIconImages(null);

        email.setBackground(new java.awt.Color(102, 102, 102));
        email.setForeground(new java.awt.Color(255, 255, 255));
        email.setText("Email");
        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });

        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Technician:");

        technician.setBackground(new java.awt.Color(102, 102, 102));
        technician.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Brian Milne", "Brent Phillips", "Frank Varano", "Marc Gwisdek", "Michael Wan", "Ryan Somerville", "Shaun Glew" }));

        tab.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                System.out.println("Tab: " + tab.getSelectedIndex());
            }
        });

        jPanel2.setBackground(java.awt.Color.gray);

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Model:");

        pcName.setBackground(new java.awt.Color(102, 102, 102));
        pcName.setForeground(new java.awt.Color(255, 255, 255));

        make.setBackground(new java.awt.Color(102, 102, 102));
        make.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "HP", "Apple", "Blackberry", "Samsung", "Monitor", "Other" }));
        make.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeActionPerformed(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Make:");

        model.setBackground(new java.awt.Color(102, 102, 102));
        model.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "GEN_LAPTOP_HP", "6930p", "8440p", "8460p", "8470p", "8510w", "2530p", "2540p", "2560p", "2570p", "9470m", "840", "820", "GEN_DESKTOP_HP", "dc5100", "6000 Pro", "600 G1", "6200 Pro", "6300 Pro", "8200 Elite", "dc5700", "dc5800", "8100 Elite" }));

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("S/N:");

        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("PC Name:");

        asset.setBackground(new java.awt.Color(102, 102, 102));
        asset.setForeground(new java.awt.Color(255, 255, 255));

        serial.setBackground(new java.awt.Color(102, 102, 102));
        serial.setForeground(new java.awt.Color(255, 255, 255));

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Asset Tag:");

        jLabel11.setBackground(new java.awt.Color(51, 51, 51));
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Issue");

        issue.setBackground(new java.awt.Color(102, 102, 102));
        issue.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        issue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                issueKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(issue);

        resLabel.setForeground(new java.awt.Color(255, 255, 255));
        resLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resLabel.setText("Resolution");

        resolution.setBackground(new java.awt.Color(102, 102, 102));
        resolution.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                resolutionKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(resolution);

        buttonGroup1.add(dssRadio);
        dssRadio.setForeground(new java.awt.Color(255, 255, 255));
        dssRadio.setText("DSS");

        buttonGroup1.add(imacRadio);
        imacRadio.setForeground(new java.awt.Color(255, 255, 255));
        imacRadio.setText("IMAC");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(make, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(model, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serial, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(asset, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pcName, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dssRadio)
                .addGap(43, 43, 43)
                .addComponent(imacRadio)
                .addGap(306, 306, 306))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(serial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(model, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23)
                    .addComponent(pcName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(make, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(asset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imacRadio)
                    .addComponent(dssRadio))
                .addContainerGap())
        );

        tab.addTab("DSS/IMAC", jPanel2);

        jPanel4.setBackground(java.awt.Color.gray);

        jLabel49.setForeground(new java.awt.Color(255, 255, 255));
        jLabel49.setText("Model:");

        asset3.setBackground(new java.awt.Color(102, 102, 102));
        asset3.setForeground(new java.awt.Color(255, 255, 255));

        jLabel50.setForeground(new java.awt.Color(255, 255, 255));
        jLabel50.setText("Model:");

        partNum2.setBackground(new java.awt.Color(102, 102, 102));
        partNum2.setForeground(new java.awt.Color(255, 255, 255));
        partNum2.setToolTipText("C7Q19AW#ABA");

        serial3.setBackground(new java.awt.Color(102, 102, 102));
        serial3.setForeground(new java.awt.Color(255, 255, 255));

        make2.setBackground(new java.awt.Color(102, 102, 102));
        make2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "HP" }));
        make2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                make2ActionPerformed(evt);
            }
        });

        model3.setBackground(new java.awt.Color(102, 102, 102));
        model3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "GEN_LAPTOP_HP", "6930p", "8440p", "8460p", "8470p", "8510w", "2530p", "2540p", "2560p", "2570p", "9470m", "840", "820", "GEN_DESKTOP_HP", "dc5100", "6000 Pro", "600 G1", "6200 Pro", "6300 Pro", "8200 Elite", "dc5700", "dc5800", "8100 Elite" }));

        jLabel51.setForeground(new java.awt.Color(255, 255, 255));
        jLabel51.setText("Make:");

        model2.setBackground(new java.awt.Color(102, 102, 102));
        model2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "GEN_LAPTOP_HP", "6930p", "8440p", "8460p", "8470p", "8510w", "2530p", "2540p", "2560p", "2570p", "9470m", "840", "820", "GEN_DESKTOP_HP", "dc5100", "6000 Pro", "600 G1", "6200 Pro", "6300 Pro", "8200 Elite", "dc5700", "dc5800", "8100 Elite" }));

        jLabel52.setForeground(new java.awt.Color(255, 255, 255));
        jLabel52.setText("S/N:");

        jLabel53.setForeground(new java.awt.Color(255, 255, 255));
        jLabel53.setText("S/N:");

        jLabel55.setForeground(new java.awt.Color(255, 255, 255));
        jLabel55.setText("Part No:");

        jLabel57.setForeground(new java.awt.Color(255, 255, 255));
        jLabel57.setText("Part No:");

        asset2.setBackground(new java.awt.Color(102, 102, 102));
        asset2.setForeground(new java.awt.Color(255, 255, 255));

        make3.setBackground(new java.awt.Color(102, 102, 102));
        make3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "HP", "Other" }));
        make3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                make3ActionPerformed(evt);
            }
        });

        jLabel60.setForeground(new java.awt.Color(255, 255, 255));
        jLabel60.setText("Asset Tag:");

        partNum3.setBackground(new java.awt.Color(102, 102, 102));
        partNum3.setForeground(new java.awt.Color(255, 255, 255));
        partNum3.setToolTipText("C7Q19AW#ABA");

        jLabel61.setForeground(new java.awt.Color(255, 255, 255));
        jLabel61.setText("Make:");

        serial2.setBackground(new java.awt.Color(102, 102, 102));
        serial2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel63.setForeground(new java.awt.Color(255, 255, 255));
        jLabel63.setText("Asset Tag:");

        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("Ticket #:");

        chTicket.setBackground(new java.awt.Color(102, 102, 102));
        chTicket.setForeground(new java.awt.Color(255, 255, 255));

        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("PC Name:");

        pcName2.setBackground(new java.awt.Color(102, 102, 102));
        pcName2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Pillar & Pod No:");

        desk.setBackground(new java.awt.Color(102, 102, 102));
        desk.setForeground(new java.awt.Color(255, 255, 255));

        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("OS:");

        os2.setBackground(new java.awt.Color(102, 102, 102));
        os2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Win 7", "Win XP" }));

        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Local Admin:");

        admin2.setBackground(new java.awt.Color(102, 102, 102));
        admin2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N", "Y" }));

        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Application List:");

        appList2.setBackground(new java.awt.Color(102, 102, 102));
        appList2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setText("PC Name:");

        pcName3.setBackground(new java.awt.Color(102, 102, 102));
        pcName3.setForeground(new java.awt.Color(255, 255, 255));

        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText("OS:");

        os3.setBackground(new java.awt.Color(102, 102, 102));
        os3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Win 7", "Win XP" }));

        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setText("Local Admin:");

        admin3.setBackground(new java.awt.Color(102, 102, 102));
        admin3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N", "Y" }));

        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setText("Application List:");

        appList3.setBackground(new java.awt.Color(102, 102, 102));
        appList3.setForeground(new java.awt.Color(255, 255, 255));

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 255, 255));
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("New Computer");

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(255, 255, 255));
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setText("Old Computer");

        jLabel32.setForeground(new java.awt.Color(255, 255, 255));
        jLabel32.setText("Docking Station Provided?:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel61)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(make3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel50)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(model3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel53)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serial3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel60)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(asset3, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel57)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(partNum3))
                    .addComponent(jSeparator8)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel51))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(make2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel49))
                            .addComponent(pcName2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(model2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel52)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(serial2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel63)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(asset2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel55)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(partNum2, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(os2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(admin2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel24)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(appList2))))
                    .addComponent(jSeparator1)
                    .addComponent(jLabel30, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(desk, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dock))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pcName3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(os3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(admin3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(appList3)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dock)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel25)
                        .addComponent(chTicket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel20)
                        .addComponent(desk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel32)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel51)
                    .addComponent(jLabel49)
                    .addComponent(jLabel52)
                    .addComponent(serial2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel63)
                    .addComponent(model2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel55)
                    .addComponent(partNum2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(make2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(asset2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(pcName2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(os2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(admin2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24)
                    .addComponent(appList2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel61)
                    .addComponent(make3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel50)
                    .addComponent(jLabel53)
                    .addComponent(serial3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(asset3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(model3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel57)
                    .addComponent(partNum3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel60))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(pcName3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(os3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28)
                    .addComponent(admin3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29)
                    .addComponent(appList3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        tab.addTab("PC Refresh", jPanel4);

        jPanel3.setBackground(java.awt.Color.gray);

        jLabel33.setForeground(new java.awt.Color(255, 255, 255));
        jLabel33.setText("Ticket #:");

        chTicket4.setBackground(new java.awt.Color(102, 102, 102));
        chTicket4.setForeground(new java.awt.Color(255, 255, 255));

        jLabel34.setForeground(new java.awt.Color(255, 255, 255));
        jLabel34.setText("Pillar & Pod No:");

        desk4.setBackground(new java.awt.Color(102, 102, 102));
        desk4.setForeground(new java.awt.Color(255, 255, 255));

        jLabel35.setForeground(new java.awt.Color(255, 255, 255));
        jLabel35.setText("Docking Station Provided?:");

        jLabel54.setForeground(new java.awt.Color(255, 255, 255));
        jLabel54.setText("Type:");

        type4.setBackground(new java.awt.Color(102, 102, 102));
        type4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Laptop", "Desktop", "Tablet", "Other" }));

        jLabel56.setForeground(new java.awt.Color(255, 255, 255));
        jLabel56.setText("Model:");

        jLabel58.setForeground(new java.awt.Color(255, 255, 255));
        jLabel58.setText("S/N:");

        serial4.setBackground(new java.awt.Color(102, 102, 102));
        serial4.setForeground(new java.awt.Color(255, 255, 255));

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(255, 255, 255));
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel36.setText("New Computer");

        jLabel64.setForeground(new java.awt.Color(255, 255, 255));
        jLabel64.setText("Asset Tag:");

        asset4.setBackground(new java.awt.Color(102, 102, 102));
        asset4.setForeground(new java.awt.Color(255, 255, 255));

        jLabel59.setForeground(new java.awt.Color(255, 255, 255));
        jLabel59.setText("Part No:");

        partNum4.setBackground(new java.awt.Color(102, 102, 102));
        partNum4.setForeground(new java.awt.Color(255, 255, 255));
        partNum4.setToolTipText("C7Q19AW#ABA");

        pcName4.setBackground(new java.awt.Color(102, 102, 102));
        pcName4.setForeground(new java.awt.Color(255, 255, 255));

        jLabel40.setForeground(new java.awt.Color(255, 255, 255));
        jLabel40.setText("PC Name:");

        model4.setBackground(new java.awt.Color(102, 102, 102));
        model4.setForeground(new java.awt.Color(255, 255, 255));

        jLabel41.setForeground(new java.awt.Color(255, 255, 255));
        jLabel41.setText("Make:");

        jLabel37.setForeground(new java.awt.Color(255, 255, 255));
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel37.setText("Description");

        description.setBackground(new java.awt.Color(102, 102, 102));
        description.setForeground(new java.awt.Color(255, 255, 255));
        description.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        make4.setBackground(new java.awt.Color(102, 102, 102));
        make4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "GEN_EQUIPMENT", "840", "820", "9470m", "iPad Air", "Galaxy Note 3" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel36, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel59)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(partNum4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel40)
                                .addGap(4, 4, 4)
                                .addComponent(pcName4, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel54)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(type4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel41)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(make4, 0, 113, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel56)
                                .addGap(4, 4, 4)
                                .addComponent(model4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel58)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(serial4, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel64)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(asset4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jSeparator6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel37, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel33)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chTicket4, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(desk4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(jLabel35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dock4))
                    .addComponent(description))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dock4)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel33)
                        .addComponent(chTicket4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel34)
                        .addComponent(desk4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel35)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel36)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel54)
                    .addComponent(jLabel56)
                    .addComponent(jLabel58)
                    .addComponent(serial4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel64)
                    .addComponent(type4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(asset4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(model4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41)
                    .addComponent(make4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(pcName4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel59)
                    .addComponent(partNum4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel37)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(description, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        tab.addTab("New Installs", jPanel3);

        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Start Time:");

        startDate.setModel(new javax.swing.SpinnerDateModel());

        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Status:");

        status.setBackground(new java.awt.Color(102, 102, 102));
        status.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Closed", "Open", "Open - SLA Hold" }));
        status.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                statusItemStateChanged(evt);
            }
        });

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Completion Time:");

        endDate.setModel(new javax.swing.SpinnerDateModel());

        actionTaken.setDisabledTextColor(new java.awt.Color(0, 0, 0));

        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Action Taken:");

        reoccurence.setBackground(new java.awt.Color(102, 102, 102));
        reoccurence.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No", "Yes" }));
        reoccurence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reoccurenceActionPerformed(evt);
            }
        });

        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Reoccurence:");

        confirmClose.setBackground(new java.awt.Color(102, 102, 102));
        confirmClose.setForeground(new java.awt.Color(255, 255, 255));
        confirmClose.setText("Confirm Closed?");

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Client's Name:");

        clientName.setBackground(new java.awt.Color(102, 102, 102));
        clientName.setForeground(new java.awt.Color(255, 255, 255));
        clientName.setToolTipText("John Smith");
        clientName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientNameActionPerformed(evt);
            }
        });

        searchButton.setBackground(new java.awt.Color(102, 102, 102));
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Title:");

        title.setBackground(new java.awt.Color(102, 102, 102));
        title.setForeground(new java.awt.Color(255, 255, 255));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Location:");

        location.setBackground(new java.awt.Color(102, 102, 102));
        location.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "OMP", "333 Bloor", "350 Bloor", "Brampton", "Other", "" }));
        location.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Floor:");

        floor.setBackground(new java.awt.Color(102, 102, 102));
        floor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16" }));

        requesterButton.setBackground(new java.awt.Color(102, 102, 102));
        requesterButton.setForeground(new java.awt.Color(255, 255, 255));
        requesterButton.setText("Search");
        requesterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requesterButtonActionPerformed(evt);
            }
        });

        requester.setBackground(new java.awt.Color(102, 102, 102));
        requester.setForeground(new java.awt.Color(255, 255, 255));

        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Requester:");

        notification.setBackground(new java.awt.Color(102, 102, 102));
        notification.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Email", "Phone Call", "Shoulder Tap", "ISM" }));

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Notification:");

        phone.setBackground(new java.awt.Color(102, 102, 102));
        phone.setForeground(new java.awt.Color(255, 255, 255));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Phone #:");

        jMenuBar2.setBackground(new java.awt.Color(255, 255, 255));

        jMenu3.setText("File");

        saveSettings.setText("Save Settings");
        saveSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSettingsActionPerformed(evt);
            }
        });
        jMenu3.add(saveSettings);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        jMenu3.add(exit);

        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");

        clearMenu.setText("Clear");
        clearMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearMenuActionPerformed(evt);
            }
        });
        jMenu4.add(clearMenu);

        jMenuBar2.add(jMenu4);

        jMenu1.setText("View");

        logs.setText("Logs");
        logs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logsActionPerformed(evt);
            }
        });
        jMenu1.add(logs);

        jMenuBar2.add(jMenu1);

        modifyMenu.setText("Modify Database");

        databaseAdd.setText("Add Client");
        databaseAdd.setEnabled(false);
        databaseAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseAddActionPerformed(evt);
            }
        });
        modifyMenu.add(databaseAdd);

        databaseUpdate.setText("Update Client");
        databaseUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseUpdateActionPerformed(evt);
            }
        });
        modifyMenu.add(databaseUpdate);

        jMenuBar2.add(modifyMenu);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(email)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(technician, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clientName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(phone, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(notification, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(requester, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(requesterButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(location, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(floor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(tab, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(confirmClose)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reoccurence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actionTaken, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69))
                    .addComponent(jSeparator3))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(clientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9)
                        .addComponent(jLabel2)
                        .addComponent(searchButton)
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(location, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(floor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel10)
                    .addComponent(notification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(requesterButton)
                    .addComponent(requester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tab, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(reoccurence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(actionTaken, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmClose))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(email)
                    .addComponent(jLabel15)
                    .addComponent(technician, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(1);
    }//GEN-LAST:event_exitActionPerformed

    private void clientNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientNameActionPerformed

        clientName.addActionListener(new ActionListener(){

                public void actionPerformed(ActionEvent e){

                        searchButtonActionPerformed(e);

                }});
    }//GEN-LAST:event_clientNameActionPerformed
    
    // Sends the email to the Microage coordinator.
    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // Check for mandatory fields
        if (clientName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Client Name is a mandatory field", "Missing field", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (location.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(null, "Location is a mandatory field", "Missing field", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (notification.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(null, "Notification is a mandatory field", "Missing field", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (issue.getText().isEmpty() && tab.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "The issue field is mandatory.", "Missing field", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (tab.getSelectedIndex() == 1) 
            if (chTicket.getText().isEmpty() || desk.getText().isEmpty() || serial2.getText().isEmpty() || 
                asset2.getText().isEmpty() || partNum2.getText().isEmpty() || pcName2.getText().isEmpty() || 
                serial3.getText().isEmpty() || asset3.getText().isEmpty() || partNum3.getText().isEmpty() || 
                pcName3.getText().isEmpty() ) {
                JOptionPane.showMessageDialog(null, "All fields are mandator for PC Refresh requests.", "Missing field", JOptionPane.ERROR_MESSAGE);
                return;
            }
        if (tab.getSelectedIndex() == 2) {
            if (chTicket4.getText().isEmpty() || desk4.getText().isEmpty() || serial4.getText().isEmpty() || 
                asset4.getText().isEmpty() || partNum4.getText().isEmpty() || pcName4.getText().isEmpty() || 
                make4.getSelectedItem() == "" || description.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "All fields are mandator for New Install requests.", "Missing field", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        if (!dssRadio.isSelected() && !imacRadio.isSelected() && tab.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Choose the type of ticket DSS or IMAC.", "Missing type", JOptionPane.ERROR_MESSAGE);
            return;
        }

        SimpleDateFormat format = new SimpleDateFormat("MMddyyHHmm");
        Date time = new Date();
        Date time2 = new Date();
        time = (Date)startDate.getValue();
        time2 = (Date)endDate.getValue();  
        String formattedDate = format.format(time);
        String formattedDate2 = format.format(time2);
        // Check date.
        if (formattedDate.compareTo(formattedDate2) >= 0) {
            JOptionPane.showMessageDialog(null, "Start date must precede the end date.", "Date Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (Integer.parseInt(format.format(new Date())) > 1212130000) {
            System.out.println("New Date " + format.format(new Date()));
        }
        // Check SLA
        SimpleDateFormat format2 = new SimpleDateFormat("MMddyyHHmm");
        Date time3 = new Date();
        Date time4 = new Date();
        time3 = (Date)startDate.getValue();
        time4 = (Date)endDate.getValue();  
        String formattedDate3 = format2.format(time3);
        String formattedDate4 = format2.format(time4);
        if (Integer.parseInt(formattedDate4) - Integer.parseInt(formattedDate3) > 400) {
            JOptionPane.showMessageDialog(null, "Ticket out of SLA. Please check your time.", "Date Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
               
        autoUpdateDatabase();
        
        DateFormat excelFormat = new SimpleDateFormat("M/d/yyyy h:mm aa");         
        Date etime = (Date)endDate.getValue();
        etimeString = excelFormat.format(etime);
         
        // ************* End Update Database ************************
        createXLS();
        /*
        final String username = "microage.wgs@gmail.com";
        final String password = "M1(r0w@g3";

        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587"); //587
           
        Session session = Session.getInstance(props,
          new javax.mail.Authenticator() {
                protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(username, password);
                }
          });
        
        try {
            String toName = "rsomerville@tor.microage.ca";
            String toName2 = "ritani@tor.microage.ca";
            //String toName = "bmilne@tor.microage.ca";
            //String toName2 = "bmilne@tor.microage.ca";
            // Find CC address to email technician.
            if (technician.getSelectedItem() == "Brian Milne")
                ccName = "bmilne@tor.microage.ca";
            else if (technician.getSelectedItem() == "Shaun Glew")
                ccName = "sglew@tor.microage.ca";
            else if (technician.getSelectedItem() == "Frank Varano")
                ccName = "fvarano@tor.microage.ca";
            else if (technician.getSelectedItem() == "Ryan Somerville")
                ccName = "rsomerville@tor.microage.ca";
            else if (technician.getSelectedItem() == "Marc Gwisdek")
                ccName = "mgwisdek@tor.microage.ca";
            else if (technician.getSelectedItem() == "Michael Wan")
                ccName = "mwan@tor.microage.ca";
            else if (technician.getSelectedItem() == "Brent Phillips")
                ccName = "bphillips@tor.microage.ca";
            // Date for Subject Line
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
            Date date = new Date();
            dateFormat.format(date);
            // Date for start end date.
            Date stime = (Date)startDate.getValue();
            DateFormat excelFormat = new SimpleDateFormat("M/d/yyyy h:mm aa");  
            String etimeString;
            //if (status.getSelectedItem() == "Closed") {
                Date etime = (Date)endDate.getValue();
                 etimeString = excelFormat.format(etime);
            //}
            //else 
                 //etimeString = "";
            
            
            
            // ******************** DSS or IMAC email message *****************
            if (tab.getSelectedIndex() == 0) {
                // Create email message
                Message message = new MimeMessage(session);
                message.setFrom(new InternetAddress("microage.wgs@gmail.com"));
                message.addRecipients(Message.RecipientType.TO, InternetAddress.parse(toName));
                message.addRecipients(Message.RecipientType.TO, InternetAddress.parse(toName2));
                message.addRecipients(Message.RecipientType.CC, InternetAddress.parse(ccName));
                if (status.getSelectedItem().equals("Closed"))
                    message.setSubject("New Ticket for " + clientName.getText() + " " + dateFormat.format(date));
                else {
                    message.setSubject("***** Rush ****** New Ticket for " + clientName.getText() + " " + dateFormat.format(date));
                    message.addHeader("X-Priority", "2");
                }

                String body = "This email was automatically generated by the Rogers WGS Ticket Tool." +
                        "<br>" + "<B>Requester's Name: </B>" + requester.getText() +
                        "<br>" + "<B>Affected Client's Name: </B>" + clientName.getText() +
                        "<br>" + "<B>Title: </B>" + title.getText() +
                        "<br>" + "<B>Location: </B>" + location.getSelectedItem() + " <B>Floor</B> " + floor.getSelectedItem() +
                        "<br>" + "<B>Phone Number: </B>" + phone.getText() +
                        "<br>" + "<B>Notification Type: </B>" + notification.getSelectedItem() +
                        "<br>" + "<B>Reoccurence: </B>" + reoccurence.getSelectedItem() +
                        "<br>" + "<B>Action Taken: </B>" + actionTaken.getText() +
                        "<br><br>" + "<B>Device Make: </B>" + make.getSelectedItem() +
                        "<br>" + "<B>Model: </B>" + model.getSelectedItem() +
                        "<br>" + "<B>Serial Number: </B>" + serial.getText() +
                        "<br>" + "<B>Asset: </B>" + asset.getText() +
                        "<br>" + "<B>Start Time: </B>" + excelFormat.format(stime) + 
                        "<br>" + "<B>Completion Time: </B>" + etimeString +
                        "<br>" + "<B>Status: </B>" + status.getSelectedItem() +
                        "<br><br>" + "<B>Issue: </B>" + issue.getText() +
                        "<br><br>" + "<B>Resolution: </B>" + resolution.getText() +
                        "<br><br>" + "<B>Technician: </B>" + technician.getSelectedItem();
                BodyPart messageBodyPart = new MimeBodyPart();

                messageBodyPart.setText(body);
                messageBodyPart.setContent(body, "text/html");               

                // Add Attachment
                Multipart multipart = new MimeMultipart();
                multipart.addBodyPart(messageBodyPart);
                MimeBodyPart attachment = new MimeBodyPart();
                String fileName = "i:\\Rogers\\Tickets\\" + attachmentName;
                DataSource source = new FileDataSource(fileName);
                attachment.setDataHandler(new DataHandler(source));
                attachment.setFileName(attachmentName);
                multipart.addBodyPart(attachment);

                message.setContent(multipart);


                // Send Email
                Transport.send(message);
            }
            else if (tab.getSelectedIndex() == 1) {
                // ****************** PC Refresh Email **********************
                // Create email message
                Message message = new MimeMessage(session);
                message.setFrom(new InternetAddress("microage.wgs@gmail.com"));
                message.addRecipients(Message.RecipientType.TO, InternetAddress.parse(toName));
                message.addRecipients(Message.RecipientType.TO, InternetAddress.parse(toName2));
                message.addRecipients(Message.RecipientType.CC, InternetAddress.parse(ccName));
                message.setSubject("PC Refresh for " + clientName.getText() + " " + dateFormat.format(date));
                

                String body = "This email was automatically generated by the Rogers WGS Ticket Tool." +
                        "<br>" + "<B>Deskside Tech Name: </B>" + technician.getSelectedItem() +
                        "<br>" + "<B>Client's Name: </B>" + clientName.getText() +
                        "<br>" + "<B>Date: </B>" + excelFormat.format(stime) + " - " + etimeString +
                        "<br>" + "<B>ISM Ticket Number: </B>" + chTicket.getText() +
                        "<br>" + "<B>Location: </B>" + location.getSelectedItem() + 
                        "<br>" + "<B>Floor: </B>" + floor.getSelectedItem() + 
                        "<br>" + "<B>Desk: </B>" + desk.getText() +
                        "<br>" + "<B>Admin Access: </B>" + admin3.getSelectedItem() +
                        "<br>" + "<B>Application List: </B>" + appList3.getText() +
                        "<br>" + "<B>Dock Provided: </B>" + dock.isSelected() +
                        "<br>" +
                        "<br>" + "<B>  Old Computer </B>" +
                        "<br>" + "<B>Make: </B>" + make3.getSelectedItem() +
                        "<br>" + "<B>Model: </B>" + model3.getSelectedItem() +
                        "<br>" + "<B>Serial: </B>" + serial3.getText() +
                        "<br>" + "<B>Asset Tag: </B>" + asset3.getText() +
                        "<br>" + "<B>Product Num: </B>" + partNum3.getText() +
                        "<br>" + "<B>PC Name: </B>" + pcName3.getText() +
                        "<br>" +
                        "<br>" + "<B>  New Computer </B>" +
                        "<br>" + "<B>Make: </B>" + make2.getSelectedItem() +
                        "<br>" + "<B>Model: </B>" + model2.getSelectedItem() +
                        "<br>" + "<B>Serial: </B>" + serial2.getText() +
                        "<br>" + "<B>Asset Tag: </B>" + asset2.getText() +
                        "<br>" + "<B>Product Num: </B>" + partNum2.getText() +
                        "<br>" + "<B>PC Name: </B>" + pcName2.getText();
                BodyPart messageBodyPart = new MimeBodyPart();

                messageBodyPart.setText(body);
                messageBodyPart.setContent(body, "text/html");               

                // Add Attachment
                Multipart multipart = new MimeMultipart();
                multipart.addBodyPart(messageBodyPart);
                MimeBodyPart attachment = new MimeBodyPart();
                String fileName = "i:\\Rogers\\Tickets\\" + attachmentName;
                DataSource source = new FileDataSource(fileName);
                attachment.setDataHandler(new DataHandler(source));
                attachment.setFileName(attachmentName);
                multipart.addBodyPart(attachment);
                message.setContent(multipart);

                // Send Email
                Transport.send(message);
            }
            else if (tab.getSelectedIndex() == 2) {
                // ****************** PC Refresh Email **********************
                // Create email message
                Message message = new MimeMessage(session);
                message.setFrom(new InternetAddress("microage.wgs@gmail.com"));
                message.addRecipients(Message.RecipientType.TO, InternetAddress.parse(toName));
                message.addRecipients(Message.RecipientType.TO, InternetAddress.parse(toName2));
                message.addRecipients(Message.RecipientType.CC, InternetAddress.parse(ccName));
                message.setSubject("New Install for " + clientName.getText() + " " + dateFormat.format(date));
                

                String body = "This email was automatically generated by the Rogers WGS Ticket Tool." +
                        "<br>" + "<B>Deskside Tech Name: </B>" + technician.getSelectedItem() +
                        "<br>" + "<B>Client's Name: </B>" + clientName.getText() +
                        "<br>" + "<B>Date: </B>" + excelFormat.format(stime) + " - " + etimeString +
                        "<br>" + "<B>ISM Ticket Number: </B>" + chTicket4.getText() +
                        "<br>" + "<B>Location: </B>" + location.getSelectedItem() + 
                        "<br>" + "<B>Floor: </B>" + floor.getSelectedItem() + 
                        "<br>" + "<B>Desk: </B>" + desk4.getText() +
                        "<br>" + "<B>Dock Provided: </B>" + dock4.isSelected() +
                        "<br>" +
                        "<br>" + "<B>  New Install </B>" +
                        "<br>" + "<B>Type: </B>" + type4.getSelectedItem() +
                        "<br>" + "<B>Make: </B>" + make4.getSelectedItem()+
                        "<br>" + "<B>Model: </B>" + model4.getText() +
                        "<br>" + "<B>Serial: </B>" + serial4.getText() +
                        "<br>" + "<B>Asset Tag: </B>" + asset4.getText() +
                        "<br>" + "<B>Product Num: </B>" + partNum4.getText() +
                        "<br>" + "<B>PC Name: </B>" + pcName4.getText() +
                        "<br>" + "<B>Description: </B>" + description.getText() ;
                BodyPart messageBodyPart = new MimeBodyPart();

                messageBodyPart.setText(body);
                messageBodyPart.setContent(body, "text/html");               

                // Add Attachment
                Multipart multipart = new MimeMultipart();
                multipart.addBodyPart(messageBodyPart);
                MimeBodyPart attachment = new MimeBodyPart();
                String fileName = "i:\\Rogers\\Tickets\\" + attachmentName;
                DataSource source = new FileDataSource(fileName);
                attachment.setDataHandler(new DataHandler(source));
                attachment.setFileName(attachmentName);
                multipart.addBodyPart(attachment);
                message.setContent(multipart);

                // Send Email
                Transport.send(message);
            }
            */

            final ImageIcon icon = new ImageIcon("lib\\mail.png");
            Image img = icon.getImage();  
            Image newimg = img.getScaledInstance(100, 100,  java.awt.Image.SCALE_SMOOTH);  
            ImageIcon newIcon = new ImageIcon(newimg); 
            JOptionPane.showMessageDialog(null, "CV Ticket Generated. Contact Ryan if this is a rush ticket", "Ticket Created", JOptionPane.INFORMATION_MESSAGE, newIcon);
            clear();
        /*
        } catch (MessagingException e) {
            JOptionPane.showMessageDialog(null, "Unable to email new ticket request. \nCheck your internet connection.\nAlternatively email your log file to RWGSUpdate@tor.microage.ca", "Error", JOptionPane.ERROR_MESSAGE);
        }
        */

    }//GEN-LAST:event_emailActionPerformed

    private void clear() {
        clientName.setText("");
        title.setText("");            
        location.setSelectedItem("");
        floor.setSelectedItem("");
        requester.setText("");
        phone.setText("");
        model.setSelectedItem("");
        serial.setText("");
        asset.setText("");
        pcName.setText("");
        model2.setSelectedItem("");
        serial2.setText("");
        asset2.setText("");
        pcName2.setText("");
        partNum2.setText("");
        appList2.setText("");
        model3.setSelectedItem("");
        serial3.setText("");
        asset3.setText("");
        pcName3.setText("");
        partNum3.setText("");
        appList3.setText("");
        chTicket.setText("");
        desk.setText("");
        chTicket4.setText("");
        desk4.setText("");
        dock4.setSelected(false);
        make4.setSelectedItem("");
        model4.setText("");
        serial4.setText("");
        asset4.setText("");
        partNum4.setText("");
        pcName4.setText("");
        description.setText("");
        issue.setText("");
        resolution.setText("");
        status.setSelectedItem("Closed");
        buttonGroup1.clearSelection();
        dock.setSelected(false);
        confirmClose.setSelected(false);
        notification.setSelectedIndex(0);
        
        // Check for settings.ini file and loads in default settings.
        setDefaults();
    } 
    
    private void clearMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearMenuActionPerformed
        clear();
    }//GEN-LAST:event_clearMenuActionPerformed

    private void setDefaults() {
        actionTaken.setEditable(false);
        actionTaken.setBackground(Color.GRAY);
        reoccurence.setSelectedItem("No");
        File f = new File("i:\\Rogers\\settings.ini");
        if(f.exists()) {
            try {
                BufferedReader br = new BufferedReader(new FileReader(f));
                technician.setSelectedItem(br.readLine());
                br.close();
            }
            catch (Exception e) {
                
            }
        }
    }
    
    // Backs up the technicians personal settings.
    private void saveSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSettingsActionPerformed
        new File("i:\\Rogers").mkdirs();
        try
	{
	    FileWriter writer = new FileWriter("i:\\Rogers\\settings.ini");
            writer.append((String)technician.getSelectedItem());
 
	    writer.flush();
	    writer.close();
	}
	catch(IOException e)
	{
	     e.printStackTrace();
	} 
    }//GEN-LAST:event_saveSettingsActionPerformed

    // Enable the tab key to switch focus.
    private void issueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_issueKeyPressed
    	if(evt.getKeyCode() == KeyEvent.VK_TAB) {
    		if(evt.getModifiers() > 0) issue.transferFocusBackward();
    		else issue.transferFocus();	
    		evt.consume();
    	}
    }//GEN-LAST:event_issueKeyPressed

    // Enable the tab key to switch focus.
    private void resolutionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_resolutionKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_TAB) {
    		if(evt.getModifiers() > 0) resolution.transferFocusBackward();
    		else resolution.transferFocus();	
    		evt.consume();
    	}
    }//GEN-LAST:event_resolutionKeyPressed

    private void logsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logsActionPerformed
        new File("i:\\Rogers\\Tickets").mkdirs();
        File file = new File ("i:\\Rogers\\Tickets");
        Desktop desktop = Desktop.getDesktop();
        try {
            desktop.open(file);
        }
        catch (Exception e) {
            
        }
    }//GEN-LAST:event_logsActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // check if name field is empty
        if (clientName.getText().trim().length() != 0 ) {
            // search through db for the name
            Connection c = null;
            Statement stmt = null;
            try {
              Class.forName("org.sqlite.JDBC");
              c = DriverManager.getConnection("jdbc:sqlite:lib\\rogerswg.db");
              c.setAutoCommit(false);
              System.out.println("Opened database successfully");

              stmt = c.createStatement();
              ResultSet rs = stmt.executeQuery( "SELECT NAME FROM COMPANY;" );
              while ( rs.next() ) {
                  if (rs.getString("name").toLowerCase().contains(clientName.getText().toLowerCase())) { 
                      String name = rs.getString("name");
                      rs = stmt.executeQuery( "SELECT * FROM COMPANY WHERE NAME = '" + name+"'" );
                      clientName.setText(name); 
                      title.setText(rs.getString("title"));
                      location.setSelectedItem(rs.getString("location"));
                      floor.setSelectedItem(rs.getString("floor"));
                      phone.setText(rs.getString("phone"));
                      if (!rs.wasNull()) {
                          make.setSelectedItem(rs.getString("make"));
                          make3.setSelectedItem(rs.getString("make"));
                      }
                      if (!rs.wasNull()) 
                        model.setSelectedItem(rs.getString("model"));
                        serial.setText(rs.getString("serial"));
                        asset.setText(rs.getString("asset")); 
                        pcName.setText(rs.getString("pcname"));
                        model3.setSelectedItem(rs.getString("model"));
                        serial3.setText(rs.getString("serial"));
                        asset3.setText(rs.getString("asset")); 
                        pcName3.setText(rs.getString("pcname"));
                        // Asset collection for database update.
                        oldTitle = rs.getString("title");
                        oldLocation = rs.getString("location");
                        oldFloor = rs.getString("floor");
                        oldPhone = rs.getString("phone");
                        oldMake = rs.getString("make");
                        oldModel = rs.getString("model");
                        oldSerial = rs.getString("serial");
                        oldAsset = rs.getString("asset");   
                        oldPCName = rs.getString("pcname");             
                        break;              
                  }                 
              }
              rs.close();
              stmt.close();
              c.close();
              System.out.println("Closed database successfully");
            } catch ( Exception e ) {
              System.err.println( e.getClass().getName() + ": " + e.getMessage() );
              System.exit(0);
            }           
        } else
            System.out.println("Name field is empty.");    
    }//GEN-LAST:event_searchButtonActionPerformed

    private void addToDatabase() {
        Connection c = null;
        Statement stmt = null;
        try {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:lib\\rogerswg.db");
            System.out.println("Opened database successfully");
            c.setAutoCommit(false);
            
            stmt = c.createStatement();
            String sql = "INSERT INTO COMPANY (PCNAME,MAKE,MODEL,SERIAL,ASSET,NAME,TITLE,LOCATION,FLOOR,PHONE) " +
                         "VALUES ('"+pcName.getText()+"', '"+make.getSelectedItem()+"', '"+model.getSelectedItem()+"', '"+serial.getText()+"', '"+asset.getText()+"', '"+clientName.getText()+"', '"+title.getText()+"', '"+location.getSelectedItem()+"', '"+floor.getSelectedItem()+"', '"+phone.getText()+"' );"; 
            System.out.print(sql);
            stmt.executeUpdate(sql);
      
            stmt.close();
            c.commit();
            c.close();
            System.out.println("Closed database successfully");
        } catch ( Exception e ) {
            System.err.println( e.getClass().getName() + ": " + e.getMessage() );
            System.exit(0);
        }
    }
    
    private void autoUpdateDatabase() {     
        // ************** Update Database *********************
        boolean update = false;
        // Update Title
        if (!title.getText().equals(oldTitle)) {
            newTitle = title.getText();
            System.out.println("New Title: " + title.getText());
            update = true;
        } else
            newTitle = oldTitle;
        // Update Location
        if (!location.getSelectedItem().equals(oldLocation)) {
            newLocation = location.getSelectedItem().toString();
            System.out.println("New location: " + location.getSelectedItem());
            update = true;
        } else
            newLocation = oldLocation;
        // Update Floor
        if (!floor.getSelectedItem().equals(oldFloor)) {
            newFloor = floor.getSelectedItem().toString();
            System.out.println("New Floor: " + floor.getSelectedItem());
            update = true;
        } else
            newFloor = oldFloor;
        // Update Phone
        if (!phone.getText().equals(oldPhone)) {
            newPhone = phone.getText();
            System.out.println("New Phone: " + phone.getText());
            update = true;
        } else
            newPhone = oldPhone;
        System.out.println("Update Status = " + update);
        
        // Update PC Info if HP
        boolean pcUpdate = false;
        if (make.getSelectedItem().equals("HP")) {
            System.out.println("Make = HP");
            // Update Model
            if (!model.getSelectedItem().equals(oldModel)) {
                newModel = model.getSelectedItem().toString();
                System.out.println("New Model: " + model.getSelectedItem());
                pcUpdate = true;
            } else
                newModel = oldModel;
            // Update S/N
            if (!serial.getText().equals(oldSerial)) {
                newSerial = serial.getText().toString();
                System.out.println("New Serial: " + serial.getText().toString());
                pcUpdate = true;
            } else
                newSerial = oldSerial;
            // Update Asset Tag
            if (!asset.getText().equals(oldAsset)) {
                newAsset = asset.getText().toString();
                System.out.println("New Asset: " + asset.getText().toString());
                pcUpdate = true;
            } else
                newAsset = oldAsset;
            // Update PC Name
            if (!pcName.getText().equals(oldPCName)) {
                newPCName = pcName.getText();
                System.out.println("New PC Name: " + pcName.getText());
                pcUpdate = true;
            } else
                newPCName = oldPCName;
        }
  
        System.out.println("PC Update Status = " + pcUpdate);
        boolean newUser = false;
        // Add new user
        if (!checkDatabase()) {
            newUser = true;
        } 
        
        if (update == true || pcUpdate == true || newUser == true) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog (null, "Client or computer info has changed. Would you like to update the database?","Warning",dialogButton);
            if(dialogResult == JOptionPane.YES_OPTION){
                System.out.println("Update YES!!!!!!!!!!!!!!!!!");
                if (newUser == true) {
                    //newUser = false;
                    addToDatabase();
                    System.out.println("New user added " + clientName.getText().toString());
                } 
                // Update database                
                Connection c = null;
                Statement stmt = null;
                try {
                    Class.forName("org.sqlite.JDBC");
                    c = DriverManager.getConnection("jdbc:sqlite:lib\\rogerswg.db");
                    System.out.println("Opened database successfully");
                    c.setAutoCommit(false);
                    String sql;
                    stmt = c.createStatement();
                    if (update == true) {     
                        // Update existing user
                        sql = "UPDATE company SET title='" +newTitle+"' WHERE name ='"+clientName.getText()+"' ";
                        System.out.println(sql);
                        stmt.executeUpdate(sql);
                        sql = "UPDATE company SET location='" +newLocation+"' WHERE name ='"+clientName.getText()+"' ";
                        System.out.println(sql);
                        stmt.executeUpdate(sql);
                        sql = "UPDATE company SET floor='" +newFloor+"' WHERE name ='"+clientName.getText()+"' ";
                        System.out.println(sql);
                        stmt.executeUpdate(sql);
                        sql = "UPDATE company SET phone='" +newPhone+"' WHERE name ='"+clientName.getText()+"' ";
                        System.out.println(sql);
                        stmt.executeUpdate(sql);
                       
                    }
                    if (pcUpdate == true) {
                        sql = "UPDATE company SET make='HP' WHERE name ='"+clientName.getText()+"' ";
                        System.out.println(sql);
                        stmt.executeUpdate(sql);
                        sql = "UPDATE company SET model='" +newModel+"' WHERE name ='"+clientName.getText()+"' ";
                        System.out.println(sql);
                        stmt.executeUpdate(sql);
                        sql = "UPDATE company SET serial='" +newSerial+"' WHERE name ='"+clientName.getText()+"' ";
                        System.out.println(sql);
                        stmt.executeUpdate(sql);
                        sql = "UPDATE company SET asset='" +newAsset+"' WHERE name ='"+clientName.getText()+"' ";
                        System.out.println(sql);
                        stmt.executeUpdate(sql);
                        sql = "UPDATE company SET pcname='" +newPCName+"' WHERE name ='"+clientName.getText()+"' ";
                        System.out.println(sql);
                        stmt.executeUpdate(sql);
                    }

                    stmt.close();
                    c.commit();
                    c.close();
                    System.out.println("Closed database successfully");
                } catch ( Exception e ) {
                    System.err.println( e.getClass().getName() + ": " + e.getMessage() );
                    System.exit(0);
                }
            }
        }
    }
    
    private void removeFromDatabase() {
        Connection c = null;
        Statement stmt = null;
        try {
          Class.forName("org.sqlite.JDBC");
          c = DriverManager.getConnection("jdbc:sqlite:lib\\rogerswg.db");
          c.setAutoCommit(false);
          System.out.println("Opened database successfully");
          stmt = c.createStatement();
          ResultSet rs = stmt.executeQuery( "SELECT NAME FROM COMPANY;" );
          while ( rs.next() ) {
              if (rs.getString("name").toLowerCase().contains(clientName.getText().toLowerCase())) { //.equals(clientName.getText())) {
                  String name = rs.getString("name");
                  stmt.executeUpdate( "DELETE FROM COMPANY WHERE NAME = '" + name+"'" );
                  break;
              }
          }     
          stmt.close();
          c.commit();
          rs.close();;
          c.close();
          System.out.println("Closed database successfully");
        } catch ( Exception e ) {
          System.err.println( e.getClass().getName() + ": " + e.getMessage() );
          System.exit(0);
        }
    }
    
    private boolean checkDatabase() {
        boolean result = false;
        Connection c = null;
        Statement stmt = null;
        try {
          Class.forName("org.sqlite.JDBC");
          c = DriverManager.getConnection("jdbc:sqlite:lib\\rogerswg.db");
          c.setAutoCommit(false);
          System.out.println("Opened database successfully");
          stmt = c.createStatement();
          ResultSet rs = stmt.executeQuery( "SELECT NAME FROM COMPANY;" );
          while ( rs.next() ) {
              if (rs.getString("name").toLowerCase().contains(clientName.getText().toLowerCase())) { //.equals(clientName.getText())) {
                  System.out.println("Client already exists in database.");
                  result = true;
                  break;
              }
          }
          rs.close();
          stmt.close();
          c.close();
          System.out.println("Closed database successfully");
        } catch ( Exception e ) {
          System.err.println( e.getClass().getName() + ": " + e.getMessage() );
          System.exit(0);
        }
        return result;
    }
    
    private void requesterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requesterButtonActionPerformed
        // check if name field is empty
        if (requester.getText().trim().length() != 0 ) {
            // search through db for the name
            Connection c = null;
            Statement stmt = null;            
            try {
                Class.forName("org.sqlite.JDBC");
                c = DriverManager.getConnection("jdbc:sqlite:lib\\rogerswg.db");
                c.setAutoCommit(false);
                System.out.println("Opened database successfully");
                stmt = c.createStatement();
                ResultSet rs = stmt.executeQuery( "SELECT NAME FROM COMPANY;" );                
                while ( rs.next() ) {
                    if (rs.getString("name").toLowerCase().contains(requester.getText().toLowerCase())) { //.equals(clientName.getText())) {
                        String name = rs.getString("name");   
                        requester.setText(name); 
                        break;
                    }
                }
                rs.close();
                stmt.close();
                c.close();
                System.out.println("Closed database successfully");
            } catch ( Exception e ) {
              System.err.println( e.getClass().getName() + ": " + e.getMessage() );
              System.exit(0);
            }            
        } else
            System.out.println("Name field is empty.");
        
    }//GEN-LAST:event_requesterButtonActionPerformed

    private void reoccurenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reoccurenceActionPerformed
        if (reoccurence.getSelectedItem() == "Yes") {
            actionTaken.setEditable(true);
            actionTaken.setBackground(Color.WHITE);
        } else {
            actionTaken.setEditable(false);
            actionTaken.setText("");
            actionTaken.setBackground(Color.GRAY);
        }
    }//GEN-LAST:event_reoccurenceActionPerformed

    private void databaseAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseAddActionPerformed
        // Name already exists in database.
        if (checkDatabase())
            JOptionPane.showMessageDialog(null, "Client already exists in the database.", "Database Error", JOptionPane.ERROR_MESSAGE);
        // Otherwise add client to database.
        else {
            if (fieldsPopulated())
                addToDatabase();
            else
                JOptionPane.showMessageDialog(null, "Populate all fields before adding to database.", "Entry Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_databaseAddActionPerformed

    private boolean fieldsPopulated() {
        if (clientName.getText().isEmpty() || title.getText().isEmpty() || location.getSelectedItem().equals("") || floor.getSelectedItem().equals("") || phone.getText().isEmpty())
            return false;      
        return true;                     
    }
    
    private void databaseUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseUpdateActionPerformed
        if (checkDatabase()) {
            if (fieldsPopulated()) {
                removeFromDatabase();
                addToDatabase();  
            }
            else
                JOptionPane.showMessageDialog(null, "Populate all fields before updating the database.", "Entry Error", JOptionPane.ERROR_MESSAGE);
        }
        else
            JOptionPane.showMessageDialog(null, "Client does not exist in database.", "Database Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_databaseUpdateActionPerformed

    private void statusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_statusItemStateChanged
        if (status.getSelectedItem() != "Closed") {
            //endDate.setEnabled(false);
            confirmClose.setSelected(false);
            confirmClose.setEnabled(false);
            reoccurence.setEnabled(false);
            jLabel18.setEnabled(false);
            jLabel19.setEnabled(false);
        }
        else {
            //endDate.setEnabled(true); 
            confirmClose.setEnabled(true);
            reoccurence.setEnabled(true);
            jLabel18.setEnabled(true);
            jLabel19.setEnabled(true);
        }
    }//GEN-LAST:event_statusItemStateChanged

    private void locationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationActionPerformed
        String[] OMPArray = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
            "11", "12", "13", "14", "15", "16", "" };
        DefaultComboBoxModel OMPModel = new DefaultComboBoxModel( OMPArray );
        String[] b333Array = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "" };
        DefaultComboBoxModel b333Model = new DefaultComboBoxModel( b333Array );
        String[] b350Array = { "1", "2", "3", "4", "5", "6", "" };
        DefaultComboBoxModel b350Model = new DefaultComboBoxModel( b350Array );
        String[] bramptonArray = { "City Center", "North Building 1st FL", 
            "North Building 2nd FL", "Networking Building", "East Building 1st FL", 
            "East Building 2nd FL", "East Building 3rd FL", "South Building 2nd FL", ""
        };
        DefaultComboBoxModel bramptonModel = new DefaultComboBoxModel( bramptonArray );
        String[] otherArray = { "855 York Mills", "1 Blue Jays Way", "Other", "" };
        DefaultComboBoxModel otherModel = new DefaultComboBoxModel( otherArray );
         
        if (location.getSelectedItem().equals("OMP")) {
            floor.setModel(OMPModel);
        } else if (location.getSelectedItem().equals("333 Bloor")) {
            floor.setModel(b333Model);
        } else if (location.getSelectedItem().equals("350 Bloor")) {
            floor.setModel(b350Model);
        } else if (location.getSelectedItem().equals("Brampton")) {
            floor.setModel(bramptonModel);
        } else if (location.getSelectedItem().equals("Other")) {
            floor.setModel(otherModel);
        } 
    }//GEN-LAST:event_locationActionPerformed

    private void make3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_make3ActionPerformed
        String[] hpModelArray = { "GEN_LAPTOP_HP", "6930p", "8440p", "8460p", "8470p", "8510w", "2530p",
            "2540p", "2560p", "2570p", "9470m", "840", "820", "GEN_DESKTOP_HP", "dc5100", "6000 Pro",
            "600 G1", "6200 Pro", "6300 Pro", "8200 Elite", "dc5700", "dc5800", "8100 Elite"};
        DefaultComboBoxModel hpModel = new DefaultComboBoxModel( hpModelArray );
        String[] monitorArray = { "GEN_MONITOR_HP", "LA1951", "L1940T", "LP2465"};
        DefaultComboBoxModel monitorModel = new DefaultComboBoxModel( monitorArray );
        String[] appleModelArray = { "GEN_MAC" , "IPHONE", "iPhone 4", "iPhone 4s",
            "iPhone 5", "iPhone 5s", "iPhone 5c", "iPhone 6", "iPhone 6 Plus", "IPAD", "IPAD2", "IPAD3", "IPAD4",
            "iPad Mini", "IPAD AIR" };
        DefaultComboBoxModel appleModel = new DefaultComboBoxModel( appleModelArray );
        String[] samsungModelArray = { "Galaxy", "Galaxy S4", "Galaxy S5", "Galaxy Note",
            "Galaxy Note 2", "Galaxy Note 3", "Galaxy Tab", "Galaxy Tab 2", "Galaxy Tab 3" };
        DefaultComboBoxModel samsungModel = new DefaultComboBoxModel( samsungModelArray );
        String[] bbModelArray = { "Blackberry", "Blackberry Q10", "Blackberry Q5",
            "Blackberry Z10", "Blackberry Z30", "BlackBerry 8900", "BlackBerry 9900",
            "BlackBerry 9000", "Playbook" };
        DefaultComboBoxModel bbModel = new DefaultComboBoxModel( bbModelArray );
        String[] defModelArray = { "GEN_EQUIPMENT", "GEN_PDA_EQUIPMENT" };
        DefaultComboBoxModel defModel = new DefaultComboBoxModel( defModelArray );

        if (make3.getSelectedItem().equals("HP")) {
            model3.setModel(hpModel);
        } else if (make3.getSelectedItem().equals("Apple")) {
            model3.setModel(appleModel);
        } else if (make3.getSelectedItem().equals("Blackberry")) {
            model3.setModel(bbModel);
        } else if (make3.getSelectedItem().equals("Samsung")) {
            model3.setModel(samsungModel);
        } else if (make3.getSelectedItem().equals("Monitor")) {
            model3.setModel(monitorModel);
        } else if (make3.getSelectedItem().equals("Other")) {
            model3.setModel(defModel);
        }
        serial3.setText("");
        asset3.setText("");
        pcName3.setText("");
    }//GEN-LAST:event_make3ActionPerformed

    private void make2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_make2ActionPerformed
        String[] hpModelArray = { "GEN_LAPTOP_HP", "6930p", "8440p", "8460p", "8470p", "8510w", "2530p",
            "2540p", "2560p", "2570p", "9470m", "840", "820", "GEN_DESKTOP_HP", "dc5100", "6000 Pro",
            "600 G1", "6200 Pro", "6300 Pro", "8200 Elite", "dc5700", "dc5800", "8100 Elite"};
        DefaultComboBoxModel hpModel = new DefaultComboBoxModel( hpModelArray );
        String[] monitorArray = { "GEN_MONITOR_HP", "LA1951", "L1940T", "LP2465"};
        DefaultComboBoxModel monitorModel = new DefaultComboBoxModel( monitorArray );
        String[] appleModelArray = { "GEN_MAC" , "IPHONE", "iPhone 4", "iPhone 4s",
            "iPhone 5", "iPhone 5s", "iPhone 5c", "iPhone 6", "iPhone 6 Plus", "IPAD", "IPAD2", "IPAD3", "IPAD4",
            "iPad Mini", "IPAD AIR" };
        DefaultComboBoxModel appleModel = new DefaultComboBoxModel( appleModelArray );
        String[] samsungModelArray = { "Galaxy", "Galaxy S4", "Galaxy S5", "Galaxy Note",
            "Galaxy Note 2", "Galaxy Note 3", "Galaxy Tab", "Galaxy Tab 2", "Galaxy Tab 3" };
        DefaultComboBoxModel samsungModel = new DefaultComboBoxModel( samsungModelArray );
        String[] bbModelArray = { "Blackberry", "Blackberry Q10", "Blackberry Q5",
            "Blackberry Z10", "Blackberry Z30", "BlackBerry 8900", "BlackBerry 9900",
            "BlackBerry 9000", "Playbook" };
        DefaultComboBoxModel bbModel = new DefaultComboBoxModel( bbModelArray );
        String[] defModelArray = { "GEN_EQUIPMENT", "GEN_PDA_EQUIPMENT" };
        DefaultComboBoxModel defModel = new DefaultComboBoxModel( defModelArray );

        if (make2.getSelectedItem().equals("HP")) {
            model2.setModel(hpModel);
        } else if (make2.getSelectedItem().equals("Apple")) {
            model2.setModel(appleModel);
        } else if (make2.getSelectedItem().equals("Blackberry")) {
            model2.setModel(bbModel);
        } else if (make2.getSelectedItem().equals("Samsung")) {
            model2.setModel(samsungModel);
        } else if (make2.getSelectedItem().equals("Monitor")) {
            model2.setModel(monitorModel);
        } else if (make2.getSelectedItem().equals("Other")) {
            model2.setModel(defModel);
        }
        serial2.setText("");
        asset2.setText("");
    }//GEN-LAST:event_make2ActionPerformed

    private void makeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeActionPerformed

        String[] hpModelArray = { "GEN_LAPTOP_HP", "6930p", "8440p", "8460p", "8470p", "8510w", "2530p",
            "2540p", "2560p", "2570p", "9470m", "840", "820", "GEN_DESKTOP_HP", "dc5100", "6000 Pro",
            "600 G1", "6200 Pro", "6300 Pro", "8200 Elite", "dc5700", "dc5800", "8100 Elite"};
        DefaultComboBoxModel hpModel = new DefaultComboBoxModel( hpModelArray );
        String[] monitorArray = { "GEN_MONITOR_HP", "LA1951", "L1940T", "LP2465"};
        DefaultComboBoxModel monitorModel = new DefaultComboBoxModel( monitorArray );
        String[] appleModelArray = { "GEN_MAC" , "IPHONE", "iPhone 4", "iPhone 4s",
            "iPhone 5", "iPhone 5s", "iPhone 5c", "iPhone 6", "iPhone 6 Plus", "IPAD", "IPAD2", "IPAD3", "IPAD4",
            "iPad Mini", "IPAD AIR" };
        DefaultComboBoxModel appleModel = new DefaultComboBoxModel( appleModelArray );
        String[] samsungModelArray = { "Galaxy", "Galaxy S4", "Galaxy S5", "Galaxy Note",
            "Galaxy Note 2", "Galaxy Note 3", "Galaxy Tab", "Galaxy Tab 2", "Galaxy Tab 3" };
        DefaultComboBoxModel samsungModel = new DefaultComboBoxModel( samsungModelArray );
        String[] bbModelArray = { "Blackberry", "Blackberry Q10", "Blackberry Q5",
            "Blackberry Z10", "Blackberry Z30", "BlackBerry 8900", "BlackBerry 9900",
            "BlackBerry 9000", "Playbook" };
        DefaultComboBoxModel bbModel = new DefaultComboBoxModel( bbModelArray );
        String[] defModelArray = { "GEN_EQUIPMENT", "GEN_PDA_EQUIPMENT" };
        DefaultComboBoxModel defModel = new DefaultComboBoxModel( defModelArray );

        if (make.getSelectedItem().equals("HP")) {
            model.setModel(hpModel);
        } else if (make.getSelectedItem().equals("Apple")) {
            model.setModel(appleModel);
        } else if (make.getSelectedItem().equals("Blackberry")) {
            model.setModel(bbModel);
        } else if (make.getSelectedItem().equals("Samsung")) {
            model.setModel(samsungModel);
        } else if (make.getSelectedItem().equals("Monitor")) {
            model.setModel(monitorModel);
        } else if (make.getSelectedItem().equals("Other")) {
            model.setModel(defModel);
        }
        serial.setText("");
        asset.setText("");
        pcName.setText("");
    }//GEN-LAST:event_makeActionPerformed
   
    private String getTech() {
        return (String)technician.getSelectedItem();
    }

    private int getLocationCode() {
        System.out.println("Start getLocationCode");
        location.getSelectedItem().equals("OMP");
        if (location.getSelectedItem().equals("OMP")) {
            System.out.println("in OMP if loop");
            if (floor.getSelectedItem().equals("1"))
                return 1;
            else if (floor.getSelectedItem().equals("2"))
                return 2;
            else if (floor.getSelectedItem().equals("3"))
                return 3;
            else if (floor.getSelectedItem().equals("4"))
                return 4;
            else if (floor.getSelectedItem().equals("5"))
                return 5;
            else if (floor.getSelectedItem().equals("6"))
                return 6;
            else if (floor.getSelectedItem().equals("7"))
                return 7;
            else if (floor.getSelectedItem().equals("8"))
                return 8;
            else if (floor.getSelectedItem().equals("9"))
                return 9;
            else if (floor.getSelectedItem().equals("10"))
                return 10;
            else if (floor.getSelectedItem().equals("11"))
                return 11;
            else if (floor.getSelectedItem().equals("12"))
                return 12;
            else if (floor.getSelectedItem().equals("13"))
                return 13;
            else if (floor.getSelectedItem().equals("14"))
                return 14;
            else if (floor.getSelectedItem().equals("15"))
                return 15;
            else if (floor.getSelectedItem().equals("16"))
                return 16;
        }
        else if (location.getSelectedItem().equals("333 Bloor")) {
            if (floor.getSelectedItem().equals("1") || floor.getSelectedItem().equals(""))
                return 17;
            else if (floor.getSelectedItem().equals("2"))
                return 18;
            else if (floor.getSelectedItem().equals("3"))
                return 19;
            else if (floor.getSelectedItem().equals("4"))
                return 20;
            else if (floor.getSelectedItem().equals("5"))
                return 21;
            else if (floor.getSelectedItem().equals("6"))
                return 22;
            else if (floor.getSelectedItem().equals("7"))
                return 23;
            else if (floor.getSelectedItem().equals("8"))
                return 24;
            else if (floor.getSelectedItem().equals("9"))
                return 25;
            else if (floor.getSelectedItem().equals("10"))
                return 26;
            else
                return 17;
        }
        else if (location.getSelectedItem().equals("350 Bloor")) { 
            if (floor.getSelectedItem().equals("1") || floor.getSelectedItem().equals(""))
                return 27;
            else if (floor.getSelectedItem().equals("2"))
                return 28;
            else if (floor.getSelectedItem().equals("3"))
                return 29;
            else if (floor.getSelectedItem().equals("4"))
                return 30;
            else if (floor.getSelectedItem().equals("5"))
                return 31;
            else if (floor.getSelectedItem().equals("6"))
                return 32;
            else if (floor.getSelectedItem().equals("7"))
                return 33;
            else
                return 27;
        }
        else if (location.getSelectedItem().equals("Brampton")) {
            System.out.println("Brampton if");
            if (floor.getSelectedItem().toString().contains("City Center") || floor.getSelectedItem().toString().isEmpty()) 
                return 36;
            else if (floor.getSelectedItem().toString().contains("South"))
                return 37;
            else if (floor.getSelectedItem().toString().contains("East"))
                return 38;
            else if (floor.getSelectedItem().toString().contains("North Building"))
                return 39;
            else if (floor.getSelectedItem().toString().contains("Networking"))
                return 40;             
            else
                return 36;
        }
        else if (location.getSelectedItem().equals("Other")) {
            System.out.println("Starting Other Loop.");
            if (floor.getSelectedItem().equals("1 Blue Jays Way"))
                return 35;
            else if (floor.getSelectedItem().equals("855 York Mills"))
                return 41;
            else
                return 1;
        }
        return 1;
    }
    
    private String getPrimaryTech() {
        if (technician.getSelectedItem() == "Brian Milne")
            return "BMILNE";
        else if (technician.getSelectedItem() == "Shaun Glew")
            return "SGLEW";
        else if (technician.getSelectedItem() == "Frank Varano")
            return "FVARANO";
        else if (technician.getSelectedItem() == "Ryan Somerville")
            return "RSOMERVI";
        else if (technician.getSelectedItem() == "Marc Gwisdek")
            return "MGWISDEK";
        else if (technician.getSelectedItem() == "Michael Wan")
            return "MWAN";
        else if (technician.getSelectedItem() == "Brent Phillips")
            return "BPHILLIP";
        return "";
    }
    
    private void createXLS() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
        Date date = new Date();
        new File("i:\\Rogers\\Tickets").mkdirs();
        
        try{
            String filename = "i:\\Rogers\\Tickets\\" + clientName.getText() + "_" + dateFormat.format(date) + ".xls";
            attachmentName = clientName.getText() + "_" + dateFormat.format(date) + ".xls";
            HSSFWorkbook workbook=new HSSFWorkbook();
            HSSFSheet sheet =  workbook.createSheet("SAMPLE");  

            HSSFRow rowhead=   sheet.createRow((short)0);
            rowhead.createCell(0).setCellValue("Record");
            rowhead.createCell(1).setCellValue("Location");
            rowhead.createCell(2).setCellValue("ContactFirst");
            rowhead.createCell(3).setCellValue("ContactLast");
            rowhead.createCell(4).setCellValue("Phone");
            rowhead.createCell(5).setCellValue("Ext");
            rowhead.createCell(6).setCellValue("Email");
            rowhead.createCell(7).setCellValue("Department");       
            rowhead.createCell(8).setCellValue("TicketOrigin");
            rowhead.createCell(9).setCellValue("Reference");
            rowhead.createCell(10).setCellValue("CSR_Code");
            rowhead.createCell(11).setCellValue("Primary_Tech_Code");
            rowhead.createCell(12).setCellValue("Item_no");
            rowhead.createCell(13).setCellValue("Serial");
            rowhead.createCell(14).setCellValue("Asset");
            rowhead.createCell(15).setCellValue("VIP");
            rowhead.createCell(16).setCellValue("Category");
            rowhead.createCell(17).setCellValue("Problem");
            rowhead.createCell(18).setCellValue("Subproblem");
            rowhead.createCell(19).setCellValue("Cause_Code");
            rowhead.createCell(20).setCellValue("Repair_Code");
            rowhead.createCell(21).setCellValue("TopCallDrivers");
            rowhead.createCell(22).setCellValue("Software");
            rowhead.createCell(23).setCellValue("Reported_Date");
            rowhead.createCell(24).setCellValue("Entry_Date");
            rowhead.createCell(25).setCellValue("Dis_Time");
            rowhead.createCell(26).setCellValue("Arv_Time");
            rowhead.createCell(27).setCellValue("Cmp_Time");
            rowhead.createCell(28).setCellValue("BCH_CODE");
            rowhead.createCell(29).setCellValue("Survey_Date");
            rowhead.createCell(30).setCellValue("Call_Back_Confirm_Closure");
            rowhead.createCell(31).setCellValue("Reoccurence");
            rowhead.createCell(32).setCellValue("Taken_Actions");
            rowhead.createCell(33).setCellValue("MemoS");
            rowhead.createCell(34).setCellValue("MemoR");
            rowhead.createCell(35).setCellValue("MemoC");
            rowhead.createCell(36).setCellValue("Requestor");

            HSSFRow row =   sheet.createRow((short)1);
            row.createCell(0).setCellValue("1"); // Record ID count
            row.createCell(1).setCellValue(getLocationCode()); // Location Code
            System.out.println("test");
            String fName = "";
            String lName = "";
            if (clientName.getText().contains(" ")) {          
                int space = clientName.getText().indexOf(" ");
                fName = clientName.getText().substring(0, space);
                lName = clientName.getText().substring(space+1, clientName.getText().length());
            } else fName = clientName.getText();
            row.createCell(2).setCellValue(fName); // First Name
            row.createCell(3).setCellValue(lName); // Last Name
            row.createCell(4).setCellValue(phone.getText()); // Phone
            row.createCell(5).setCellValue(""); // Ext
            row.createCell(6).setCellValue(fName + "." + lName + "@rci.rogers.com"); // Email
            row.createCell(7).setCellValue("Rogers"); // Department
            row.createCell(8).setCellValue(notification.getSelectedItem().toString()); // Notification Type
            row.createCell(9).setCellValue(chTicket.getText()); // Incident Reference Number
            row.createCell(10).setCellValue(""); // CSR_Code
            row.createCell(11).setCellValue(getPrimaryTech()); //Primary Tech
            if (tab.getSelectedIndex() == 0) {
                row.createCell(12).setCellValue(model.getSelectedItem().toString()); // Item Number Model code
                row.createCell(13).setCellValue(serial.getText()); // Serial
                row.createCell(14).setCellValue(asset.getText()); // Asset
            } else if (tab.getSelectedIndex() == 1) {
                row.createCell(12).setCellValue(model3.getSelectedItem().toString()); // Item Number Model code
                row.createCell(13).setCellValue(serial3.getText()); // Serial
                row.createCell(14).setCellValue(asset3.getText()); // Asset
            } else if (tab.getSelectedIndex() == 2) {
                row.createCell(12).setCellValue(""); // Item Number Model code
                row.createCell(13).setCellValue(serial4.getText()); // Serial
                row.createCell(14).setCellValue(asset4.getText()); // Asset
            }
            String sType = "";
            String cType = "";
            if (tab.getSelectedIndex() == 1){
                sType = "IMAC-VIP";
                cType = "REFRESH";
            } else if (tab.getSelectedIndex() == 2){
                sType = "IMAC-VIP";
                cType = "IMAC";
            } else if (imacRadio.isSelected()) {
                sType = "IMAC-VIP";
                cType = "IMAC";
            } else if (dssRadio.isSelected()){
                sType = "SEV4-VIP";
                cType = "DESKSIDE";
            } 
            int vip = 0;
            if (title.getText().contains("EA") || title.getText().contains("VP") || 
                title.getText().contains("CEO") || title.getText().contains("Chairman") || 
                title.getText().contains("President") || title.getText().contains("AA"))
                vip = 1;
            row.createCell(15).setCellValue(vip); // Service Type
            row.createCell(16).setCellValue(cType); // Category
            row.createCell(17).setCellValue(""); // Problem
            row.createCell(18).setCellValue(""); // Subproblem
            row.createCell(19).setCellValue(""); // Cause
            row.createCell(20).setCellValue(""); // Repair
            row.createCell(21).setCellValue(""); // Top Call Driver
            row.createCell(22).setCellValue(""); // Software
            Date stime = (Date)startDate.getValue();
            Date etime = (Date)endDate.getValue();
            DateFormat excelFormat = new SimpleDateFormat("M/d/yyyy h:mm aa");  
            row.createCell(23).setCellValue(excelFormat.format(stime)); // Reported Date
            row.createCell(24).setCellValue(excelFormat.format(stime)); // Entry Date
            row.createCell(25).setCellValue(""); // Dispatch Time
            row.createCell(26).setCellValue(excelFormat.format(stime)); // Arrival Time
            //if (status.getSelectedItem() == "Closed")
                row.createCell(27).setCellValue(excelFormat.format(etime)); // Completion Time
            //else 
                //row.createCell(27).setCellValue(""); // Completion Time
            row.createCell(28).setCellValue(""); // BCH_CODE Close Code
            row.createCell(29).setCellValue(""); // Survey Date
            int myInt = (confirmClose.isSelected()) ? 1 : 0;
            row.createCell(30).setCellValue(myInt); // Call back confirm close 1 or 0
            int rCheck;
            if (reoccurence.getSelectedItem() == "Yes")
                rCheck = 1;
            else
                rCheck = 0;
            row.createCell(31).setCellValue(rCheck); // Reoccurence?
            row.createCell(32).setCellValue(actionTaken.getText().toString()); // Taken Action
            if (tab.getSelectedIndex() == 0) {
                row.createCell(33).setCellValue(issue.getText()); // MemoS
                if (status.getSelectedItem() == "Closed") {
                    row.createCell(34).setCellValue(resolution.getText()); // MemoR
                } else
                    row.createCell(35).setCellValue(resolution.getText()); // MemoC
                 /*"<br>" + "<B>Deskside Tech Name: </B>" + technician.getSelectedItem() +
                        "<br>" + "<B>Client's Name: </B>" + clientName.getText() +
                        "<br>" + "<B>Date: </B>" + excelFormat.format(stime) + " - " + etimeString +
                        "<br>" + "<B>ISM Ticket Number: </B>" + chTicket.getText() +
                        "<br>" + "<B>Location: </B>" + location.getSelectedItem() + 
                        "<br>" + "<B>Floor: </B>" + floor.getSelectedItem() + 
                        "<br>" + "<B>Desk: </B>" + desk.getText() +
                        "<br>" + "<B>Admin Access: </B>" + admin3.getSelectedItem() +
                        "<br>" + "<B>Application List: </B>" + appList3.getText() +
                        "<br>" + "<B>Dock Provided: </B>" + dock.isSelected() +
                        "<br>" +
                        "<br>" + "<B>  Old Computer </B>" +
                        "<br>" + "<B>Make: </B>" + make3.getSelectedItem() +
                        "<br>" + "<B>Model: </B>" + model3.getSelectedItem() +
                        "<br>" + "<B>Serial: </B>" + serial3.getText() +
                        "<br>" + "<B>Asset Tag: </B>" + asset3.getText() +
                        "<br>" + "<B>Product Num: </B>" + partNum3.getText() +
                        "<br>" + "<B>PC Name: </B>" + pcName3.getText() +
                        "<br>" +
                        "<br>" + "<B>  New Computer </B>" +
                        "<br>" + "<B>Make: </B>" + make2.getSelectedItem() +
                        "<br>" + "<B>Model: </B>" + model2.getSelectedItem() +
                        "<br>" + "<B>Serial: </B>" + serial2.getText() +
                        "<br>" + "<B>Asset Tag: </B>" + asset2.getText() +
                        "<br>" + "<B>Product Num: </B>" + partNum2.getText() +
                        "<br>" + "<B>PC Name: </B>" + pcName2.getText();*/
            } else if (tab.getSelectedIndex() == 2) {
                row.createCell(33).setCellValue("New Install Request # " + chTicket4.getText() + " " + description.getText()); // MemoS
                row.createCell(34).setCellValue("Completed the new install \r" +
                        "Deskside Tech Name: " + technician.getSelectedItem() + "\r" +
                        "Client's Name: " + clientName.getText() + "\r" +
                        "Date: " + excelFormat.format(stime) + " - " + etimeString + "\r" +
                        "ISM Ticket Number: " + chTicket4.getText() + "\r" +
                        "Location: " + location.getSelectedItem() +  "\r" +
                        "Floor: " + floor.getSelectedItem() +  "\r" +
                        "Desk: " + desk4.getText() + "\r" +
                        "Dock Provided: " + dock4.isSelected() + "\r" +
                        "  New Install " + "\r" +
                        "Type: " + type4.getSelectedItem() + "\r" +
                        "Make: " + make4.getSelectedItem()+ "\r" +
                        "Model: " + model4.getText() + "\r" +
                        "Serial: " + serial4.getText() + "\r" +
                        "Asset Tag: " + asset4.getText() + "\r" +
                        "Product Num: " + partNum4.getText() + "\r" +
                        "PC Name: " + pcName4.getText() + "\r" +
                        "Description: " + description.getText()); // MemoR
            } else {
                row.createCell(33).setCellValue("PC Hardware Refresh request # " + chTicket.getText()); // MemoS
                row.createCell(34).setCellValue("Refreshed the client's computer. \r" + 
                        "Date: " + excelFormat.format(stime) + " - " + etimeString + " \r" +
                        "ISM Ticket Number: " + chTicket.getText() + "\r" +
                        "Location: " + location.getSelectedItem() +  "\r" +
                        "Floor: " + floor.getSelectedItem() +  "\r" +
                        "Desk: " + desk.getText() + "\r" +
                        "Admin Access: " + admin3.getSelectedItem() + "\r" +
                        "Application List: " + appList3.getText() + "\r" +
                        "Dock Provided: " + dock.isSelected() + "\r" +
                        "  Old Computer " + "\r" +
                        "Make: " + make3.getSelectedItem() + "\r" +
                        "Model: " + model3.getSelectedItem() + "\r" +
                        "Serial: " + serial3.getText() + "\r" +
                        "Asset Tag: " + asset3.getText() + "\r" +
                        "Product Num: " + partNum3.getText() + "\r" +
                        "PC Name: " + pcName3.getText() + "\r" +
                        "  New Computer " + "\r" +
                        "Make: " + make2.getSelectedItem() + "\r" +
                        "Model: " + model2.getSelectedItem() + "\r" +
                        "Serial: " + serial2.getText() + "\r" +
                        "Asset Tag: " + asset2.getText() + "\r" +
                        "Product Num: " + partNum2.getText() + "\r" +
                        "PC Name: " + pcName2.getText()); // MemoR
            }
            if (requester.getText().equals("")) 
                row.createCell(36).setCellValue(clientName.getText());
            else
                row.createCell(36).setCellValue(requester.getText());
            FileOutputStream fileOut =  new FileOutputStream(filename);
            workbook.write(fileOut);
            fileOut.close();
            System.out.println("Your excel file has been generated!");
        } catch ( Exception ex ) {
            System.out.println(ex);
        }
        
        // Create a second copy in the WGSInput folder
        try{
            String filename = "W:\\WGSImport\\" + clientName.getText() + "_" + dateFormat.format(date) + ".xls";
            attachmentName = clientName.getText() + "_" + dateFormat.format(date) + ".xls";
            HSSFWorkbook workbook=new HSSFWorkbook();
            HSSFSheet sheet =  workbook.createSheet("SAMPLE");  
            HSSFRow rowhead=   sheet.createRow((short)0);
            rowhead.createCell(0).setCellValue("Record");
            rowhead.createCell(1).setCellValue("Location");
            rowhead.createCell(2).setCellValue("ContactFirst");
            rowhead.createCell(3).setCellValue("ContactLast");
            rowhead.createCell(4).setCellValue("Phone");
            rowhead.createCell(5).setCellValue("Ext");
            rowhead.createCell(6).setCellValue("Email");
            rowhead.createCell(7).setCellValue("Department");       
            rowhead.createCell(8).setCellValue("TicketOrigin");
            rowhead.createCell(9).setCellValue("Reference");
            rowhead.createCell(10).setCellValue("CSR_Code");
            rowhead.createCell(11).setCellValue("Primary_Tech_Code");
            rowhead.createCell(12).setCellValue("Item_no");
            rowhead.createCell(13).setCellValue("Serial");
            rowhead.createCell(14).setCellValue("Asset");
            rowhead.createCell(15).setCellValue("VIP");
            rowhead.createCell(16).setCellValue("Category");
            rowhead.createCell(17).setCellValue("Problem");
            rowhead.createCell(18).setCellValue("Subproblem");
            rowhead.createCell(19).setCellValue("Cause_Code");
            rowhead.createCell(20).setCellValue("Repair_Code");
            rowhead.createCell(21).setCellValue("TopCallDrivers");
            rowhead.createCell(22).setCellValue("Software");
            rowhead.createCell(23).setCellValue("Reported_Date");
            rowhead.createCell(24).setCellValue("Entry_Date");
            rowhead.createCell(25).setCellValue("Dis_Time");
            rowhead.createCell(26).setCellValue("Arv_Time");
            rowhead.createCell(27).setCellValue("Cmp_Time");
            rowhead.createCell(28).setCellValue("BCH_CODE");
            rowhead.createCell(29).setCellValue("Survey_Date");
            rowhead.createCell(30).setCellValue("Call_Back_Confirm_Closure");
            rowhead.createCell(31).setCellValue("Reoccurence");
            rowhead.createCell(32).setCellValue("Taken_Actions");
            rowhead.createCell(33).setCellValue("MemoS");
            rowhead.createCell(34).setCellValue("MemoR");
            rowhead.createCell(35).setCellValue("MemoC");
            rowhead.createCell(36).setCellValue("Requestor");

            HSSFRow row =   sheet.createRow((short)1);
            row.createCell(0).setCellValue("1"); // Record ID count
            row.createCell(1).setCellValue(getLocationCode()); // Location Code
            System.out.println("test");
            String fName = "";
            String lName = "";
            if (clientName.getText().contains(" ")) {          
                int space = clientName.getText().indexOf(" ");
                fName = clientName.getText().substring(0, space);
                lName = clientName.getText().substring(space+1, clientName.getText().length());
            } else fName = clientName.getText();
            row.createCell(2).setCellValue(fName); // First Name
            row.createCell(3).setCellValue(lName); // Last Name
            row.createCell(4).setCellValue(phone.getText()); // Phone
            row.createCell(5).setCellValue(""); // Ext
            row.createCell(6).setCellValue(fName + "." + lName + "@rci.rogers.com"); // Email
            row.createCell(7).setCellValue("Rogers"); // Department
            row.createCell(8).setCellValue(notification.getSelectedItem().toString()); // Notification Type
            row.createCell(9).setCellValue(chTicket.getText()); // Incident Reference Number
            row.createCell(10).setCellValue(""); // CSR_Code
            row.createCell(11).setCellValue(getPrimaryTech()); //Primary Tech
            if (tab.getSelectedIndex() == 0) {
                row.createCell(12).setCellValue(model.getSelectedItem().toString()); // Item Number Model code
                row.createCell(13).setCellValue(serial.getText()); // Serial
                row.createCell(14).setCellValue(asset.getText()); // Asset
            } else if (tab.getSelectedIndex() == 1) {
                row.createCell(12).setCellValue(model3.getSelectedItem().toString()); // Item Number Model code
                row.createCell(13).setCellValue(serial3.getText()); // Serial
                row.createCell(14).setCellValue(asset3.getText()); // Asset
            } else if (tab.getSelectedIndex() == 2) {
                row.createCell(12).setCellValue(""); // Item Number Model code
                row.createCell(13).setCellValue(serial4.getText()); // Serial
                row.createCell(14).setCellValue(asset4.getText()); // Asset
            }
            String sType = "";
            String cType = "";
            if (tab.getSelectedIndex() == 1){
                sType = "IMAC-VIP";
                cType = "REFRESH";
            } else if (tab.getSelectedIndex() == 2){
                sType = "IMAC-VIP";
                cType = "IMAC";
            } else if (imacRadio.isSelected()) {
                sType = "IMAC-VIP";
                cType = "IMAC";
            } else if (dssRadio.isSelected()){
                sType = "SEV4-VIP";
                cType = "DESKSIDE";
            } 
            int vip = 0;
            if (title.getText().contains("EA") || title.getText().contains("VP") || 
                title.getText().contains("CEO") || title.getText().contains("Chairman") || 
                title.getText().contains("President") || title.getText().contains("AA"))
                vip = 1;
            row.createCell(15).setCellValue(vip); // Service Type
            row.createCell(16).setCellValue(cType); // Category
            row.createCell(17).setCellValue(""); // Problem
            row.createCell(18).setCellValue(""); // Subproblem
            row.createCell(19).setCellValue(""); // Cause
            row.createCell(20).setCellValue(""); // Repair
            row.createCell(21).setCellValue(""); // Top Call Driver
            row.createCell(22).setCellValue(""); // Software
            Date stime = (Date)startDate.getValue();
            Date etime = (Date)endDate.getValue();
            DateFormat excelFormat = new SimpleDateFormat("M/d/yyyy h:mm aa");  
            row.createCell(23).setCellValue(excelFormat.format(stime)); // Reported Date
            row.createCell(24).setCellValue(excelFormat.format(stime)); // Entry Date
            row.createCell(25).setCellValue(""); // Dispatch Time
            row.createCell(26).setCellValue(excelFormat.format(stime)); // Arrival Time
            //if (status.getSelectedItem() == "Closed")
                row.createCell(27).setCellValue(excelFormat.format(etime)); // Completion Time
            //else 
                //row.createCell(27).setCellValue(""); // Completion Time
            row.createCell(28).setCellValue(""); // BCH_CODE Close Code
            row.createCell(29).setCellValue(""); // Survey Date
            int myInt = (confirmClose.isSelected()) ? 1 : 0;
            row.createCell(30).setCellValue(myInt); // Call back confirm close 1 or 0
            int rCheck;
            if (reoccurence.getSelectedItem() == "Yes")
                rCheck = 1;
            else
                rCheck = 0;
            row.createCell(31).setCellValue(rCheck); // Reoccurence?
            row.createCell(32).setCellValue(actionTaken.getText().toString()); // Taken Action
            if (tab.getSelectedIndex() == 0) {
                row.createCell(33).setCellValue(issue.getText()); // MemoS
                if (status.getSelectedItem() == "Closed") {
                    row.createCell(34).setCellValue(resolution.getText()); // MemoR
                } else
                    row.createCell(35).setCellValue(resolution.getText()); // MemoC
            } else if (tab.getSelectedIndex() == 2) {
                row.createCell(33).setCellValue("New Install Request # " + chTicket4.getText() + " " + description.getText()); // MemoS
                row.createCell(34).setCellValue("Completed the new install \r" +
                        "Deskside Tech Name: " + technician.getSelectedItem() + "\r" +
                        "Client's Name: " + clientName.getText() + "\r" +
                        "Date: " + excelFormat.format(stime) + " - " + etimeString + "\r" +
                        "ISM Ticket Number: " + chTicket4.getText() + "\r" +
                        "Location: " + location.getSelectedItem() +  "\r" +
                        "Floor: " + floor.getSelectedItem() +  "\r" +
                        "Desk: " + desk4.getText() + "\r" +
                        "Dock Provided: " + dock4.isSelected() + "\r" +
                        "  New Install " + "\r" +
                        "Type: " + type4.getSelectedItem() + "\r" +
                        "Make: " + make4.getSelectedItem()+ "\r" +
                        "Model: " + model4.getText() + "\r" +
                        "Serial: " + serial4.getText() + "\r" +
                        "Asset Tag: " + asset4.getText() + "\r" +
                        "Product Num: " + partNum4.getText() + "\r" +
                        "PC Name: " + pcName4.getText() + "\r" +
                        "Description: " + description.getText()); // MemoR
            } else {
                row.createCell(33).setCellValue("PC Hardware Refresh request # " + chTicket.getText()); // MemoS
                row.createCell(34).setCellValue("Refreshed the client's computer. \r" + 
                        "Date: " + excelFormat.format(stime) + " - " + etimeString + " \r" +
                        "ISM Ticket Number: " + chTicket.getText() + "\r" +
                        "Location: " + location.getSelectedItem() +  "\r" +
                        "Floor: " + floor.getSelectedItem() +  "\r" +
                        "Desk: " + desk.getText() + "\r" +
                        "Admin Access: " + admin3.getSelectedItem() + "\r" +
                        "Application List: " + appList3.getText() + "\r" +
                        "Dock Provided: " + dock.isSelected() + "\r" +
                        "  Old Computer " + "\r" +
                        "Make: " + make3.getSelectedItem() + "\r" +
                        "Model: " + model3.getSelectedItem() + "\r" +
                        "Serial: " + serial3.getText() + "\r" +
                        "Asset Tag: " + asset3.getText() + "\r" +
                        "Product Num: " + partNum3.getText() + "\r" +
                        "PC Name: " + pcName3.getText() + "\r" +
                        "  New Computer " + "\r" +
                        "Make: " + make2.getSelectedItem() + "\r" +
                        "Model: " + model2.getSelectedItem() + "\r" +
                        "Serial: " + serial2.getText() + "\r" +
                        "Asset Tag: " + asset2.getText() + "\r" +
                        "Product Num: " + partNum2.getText() + "\r" +
                        "PC Name: " + pcName2.getText()); // MemoR
            }
            if (requester.getText().equals("")) 
                row.createCell(36).setCellValue(clientName.getText());
            else
                row.createCell(36).setCellValue(requester.getText());
            FileOutputStream fileOut =  new FileOutputStream(filename);
            workbook.write(fileOut);
            fileOut.close();
            System.out.println("Your excel file has been generated!");
        } catch ( Exception ex ) {
            System.out.println(ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ticket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ticket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ticket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ticket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ticket().setVisible(true);
            }
        });        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField actionTaken;
    private javax.swing.JComboBox admin2;
    private javax.swing.JComboBox admin3;
    private javax.swing.JTextField appList2;
    private javax.swing.JTextField appList3;
    private javax.swing.JTextField asset;
    private javax.swing.JTextField asset2;
    private javax.swing.JTextField asset3;
    private javax.swing.JTextField asset4;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField chTicket;
    private javax.swing.JTextField chTicket4;
    private javax.swing.JMenuItem clearMenu;
    private javax.swing.JTextField clientName;
    private javax.swing.JCheckBox confirmClose;
    private javax.swing.JMenuItem databaseAdd;
    private javax.swing.JMenuItem databaseUpdate;
    private javax.swing.JTextField description;
    private javax.swing.JTextField desk;
    private javax.swing.JTextField desk4;
    private javax.swing.JCheckBox dock;
    private javax.swing.JCheckBox dock4;
    private javax.swing.JRadioButton dssRadio;
    private javax.swing.JButton email;
    private javax.swing.JSpinner endDate;
    private javax.swing.JMenuItem exit;
    private javax.swing.JComboBox floor;
    private javax.swing.JRadioButton imacRadio;
    private javax.swing.JTextPane issue;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JComboBox location;
    private javax.swing.JMenuItem logs;
    private javax.swing.JComboBox make;
    private javax.swing.JComboBox make2;
    private javax.swing.JComboBox make3;
    private javax.swing.JComboBox make4;
    private javax.swing.JComboBox model;
    private javax.swing.JComboBox model2;
    private javax.swing.JComboBox model3;
    private javax.swing.JTextField model4;
    private javax.swing.JMenu modifyMenu;
    private javax.swing.JComboBox notification;
    private javax.swing.JComboBox os2;
    private javax.swing.JComboBox os3;
    private javax.swing.JTextField partNum2;
    private javax.swing.JTextField partNum3;
    private javax.swing.JTextField partNum4;
    private javax.swing.JTextField pcName;
    private javax.swing.JTextField pcName2;
    private javax.swing.JTextField pcName3;
    private javax.swing.JTextField pcName4;
    private javax.swing.JTextField phone;
    private javax.swing.JComboBox reoccurence;
    private javax.swing.JTextField requester;
    private javax.swing.JButton requesterButton;
    private javax.swing.JLabel resLabel;
    private javax.swing.JTextPane resolution;
    private javax.swing.JMenuItem saveSettings;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField serial;
    private javax.swing.JTextField serial2;
    private javax.swing.JTextField serial3;
    private javax.swing.JTextField serial4;
    private javax.swing.JSpinner startDate;
    private javax.swing.JComboBox status;
    private javax.swing.JTabbedPane tab;
    private javax.swing.JComboBox technician;
    private javax.swing.JTextField title;
    private javax.swing.JComboBox type4;
    // End of variables declaration//GEN-END:variables
    private String attachmentName;
    String ccName;
    String oldTitle;    String oldLocation;    String oldFloor;    String oldPhone;    
    String oldMake;    String oldModel;    String oldSerial;    String oldAsset;  
    String oldPCName;
    String newTitle; String newLocation; String newFloor; String newPhone; 
    String newMake; String newModel; String newSerial; String newAsset;
    String newPCName;
    ImageIcon img;
    String etimeString;
}
